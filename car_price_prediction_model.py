# -*- coding: utf-8 -*-
"""Car Price Prediction Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/167hmY39MQIkky8PYDYHoJ6hvw9O_lvWB

# Import libraries
"""

# Pandas
import pandas as pd
# Numpy
import numpy as np
# Libraries for plotting
import matplotlib.pyplot as plt
import seaborn as sns
# Train-test split
from sklearn.model_selection import train_test_split
# Min-max scling
from sklearn.preprocessing import MinMaxScaler
# Statsmodel
import statsmodels.api as sm
# VIF
from statsmodels.stats.outliers_influence import variance_inflation_factor
#R-squared
from sklearn.metrics import r2_score
# Label encoding
from sklearn.preprocessing import LabelEncoder
# Importing RFE
from sklearn.feature_selection import RFE
# Importing LinearRegression
from sklearn.linear_model import LinearRegression
# Importing MSE
from sklearn.metrics import mean_squared_error

"""# Import Data"""

# Assuming "CarsData.csv" file is uploaded to your Colab environment
try:
  df = pd.read_csv('/CarsData.csv')
  print("File loaded successfully.")
except FileNotFoundError:
  print("Error: CarsData.csv not found. Please upload the file to your Colab environment.")
except pd.errors.ParserError:
  print("Error: Could not parse the CSV file. Please check the file format.")
except Exception as e:
  print(f"An unexpected error occurred: {e}")

"""# Understanding Data"""

df.head()

df.shape

df.info()

df.describe()

"""# Data Proccessing

Change (CarName) into (Company) that contains only the company name
"""

# Creating 'Company' column
company = df["CarName"].str.split(" ", n = 1, expand = True)
df["company"] = company[0]

# Dropping 'CarName' column
df.drop("CarName",axis=1,inplace=True)

"""Drop car_ID as we are not using it"""

df.drop("car_ID",axis=1,inplace=True)

"""Handling null values"""

# Check for null values in each column
df.isnull().sum()

"""Handlin misspilling"""

df['drivewheel'] = df['drivewheel'].replace('4wd','fwd')
df['company'] = df['company'].replace('maxda','mazda')
df['company'] = df['company'].replace('porcshce','porsche')
df['company'] = df['company'].replace('toyouta','toyota')
df['company'] = df['company'].replace('vokswagen','volkswagen')
df['company'] = df['company'].replace('Nissan','nissan')
df['company'] = df['company'].replace('vw','volkswagen')

"""Handling outliers"""

col_numeric = ['wheelbase','carlength','carwidth','carheight','curbweight', 'enginesize','boreratio','stroke','compressionratio','horsepower','peakrpm','citympg','highwaympg','price']

for col in col_numeric:
    q1 = df[col].quantile(0.25)
    q3 = df[col].quantile(0.75)
    iqr = q3-q1
    range_low  = q1-1.5*iqr
    range_high = q3+1.5*iqr
    df = df[(df[col] > range_low) & (df[col] < range_high)]

df.shape

"""# Check Balance"""

col_category = ['symboling', 'fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'enginetype', 'cylindernumber', 'fuelsystem', 'company']
k=0
plt.figure(figsize=(20, 25))
for col in col_category:
    k=k+1
    plt.subplot(4, 3,k)
    df[col].value_counts().plot(kind='bar')
    plt.title(col)

"""**Observations:**
1. symboling: There are very few with rating -2.
2. fuletype: All the cars fule type is Gas, as Diesel cars were removed while removing outliers.
3. aspiration: Lesser number of turbo than std.
4. engineloaction: All the engine location is in front, as all the rear engine cars were removed while removing outliers.
5. enginetype: Considerably more number of ohc than others.
6. cylindernumber: Large number of four cyliners than others.
7. fulesystem: mpfi and 2bbl fulesystem cars are more comparitavely others.
8. company: Most of the Toyata company cars were surveyed.

# Vesualizations

## Visualising the numerical variables
"""

plt.figure(figsize=(12,12))
sns.pairplot(df[col_numeric])
plt.show()

"""## Visualising the categorical variables"""

k=0
plt.figure(figsize=(20,18))
for col in range (len(col_category)-1):
    k=k+1
    plt.subplot(4, 3, k)
    sns.boxplot(x = col_category[col], y = 'price', data = df)

plt.figure(figsize=(10, 6))
sns.boxplot(x='company', y='price', data=df)
plt.xticks(rotation=90)
plt.show()

"""**Observations**

1. company: Porsche has very high median price compared to other cars, though the number of Porsche cars is very less. Volvo, alfa-romero, audi and BMW are also high median price than others. Saab has wide rage of price, with high median price.
2. aspiration: std has lower median than turbo.
3. carbody: convertible has higher median that others.
4. symboling: -2 and -1 have higher median price than others.
5. enginelocation: rear has very high median price than fromt.
6. cylindernumber: Four has lower median than others.
7. fulesystem: 1bbl and 2bbl have lower median price than others.

# Preparing Data

Converting categorical variables (fueltype, aspiration, doornumber, drivewheel, enginelocation) with two levels to binary variables.
"""

df['fueltype'] = df['fueltype'].map({'gas': 1, 'diesel': 0})
df['aspiration'] = df['aspiration'].map({'std':1, 'turbo':0})
df['doornumber'] = df['doornumber'].map({'four':1, 'two':0})
df['drivewheel'] = df['drivewheel'].map({'fwd':1, 'rwd':0})
df['enginelocation'] = df['enginelocation'].map({'front':1, 'rear':0})

"""Converting other categorical variables with more than two levels to dummy variables"""

# symboling
# Value -2 is dummy
symboling_dummies = pd.get_dummies(df['symboling'], drop_first = True)
symboling_dummies = symboling_dummies.rename(columns={-1:'symboling(-1)', 0:'symboling(0)', 1:'symboling(1)',2:'symboling(2)', 3:'symboling(3)'})
df = pd.concat([df,symboling_dummies], axis=1)
df.drop('symboling', axis=1, inplace=True)

# carbody
# Value convertible is dummy
carbody_dummies = pd.get_dummies(df['carbody'], drop_first = True)
carbody_dummies = carbody_dummies.rename(columns={'hardtop':'carbody(hardtop)', 'hatchback':'carbody(hatchback)', 'sedan':'carbody(sedan)','wagon':'carbody(wagon)'})
df = pd.concat([df,carbody_dummies], axis=1)
df.drop('carbody', axis=1, inplace=True)

# enginetype
# Value dohc is dummy
enginetype_dummies = pd.get_dummies(df['enginetype'], drop_first = True)
enginetype_dummies = enginetype_dummies.rename(columns={'dohcv':'enginetype(dohcv)', 'l':'enginetype(l)', 'ohc':'enginetype(ohc)', 'ohcf':'enginetype(ohcf)', 'ohcv':'enginetype(ohcv)', 'rotor':'enginetype(rotor)'})
df = pd.concat([df,enginetype_dummies], axis=1)
df.drop('enginetype', axis=1, inplace=True)

# cylindernumber
# value eight is dummy
cylindernumber_dummies = pd.get_dummies(df['cylindernumber'], drop_first = True)
cylindernumber_dummies = cylindernumber_dummies.rename(columns={'five':'cylindernumber(five)', 'four':'cylindernumber(four)', 'six':'cylindernumber(six)', 'three':'cylindernumber(three)', 'twelve':'cylindernumber(twelve)', 'two':'cylindernumber(two)'})
df = pd.concat([df,cylindernumber_dummies], axis=1)
df.drop('cylindernumber', axis=1, inplace=True)

# fuelsystem
# Value 1bbl is dummy
fuelsystem_dummies = pd.get_dummies(df['fuelsystem'], drop_first = True)
fuelsystem_dummies = fuelsystem_dummies.rename(columns={'2bbl':'fuelsystem(2bbl)', '4bbl':'fuelsystem(4bbl)', 'idi':'fuelsystem(idi)', 'mfi':'fuelsystem(mfi)', 'mpfi':'fuelsystem(mpfi)', 'spdi':'fuelsystem(spdi)', 'spfi':'fuelsystem(spfi)'})
df = pd.concat([df,fuelsystem_dummies], axis=1)
df.drop('fuelsystem', axis=1, inplace=True)

# company
# Value alfa-romero is dummy
company_dummies = pd.get_dummies(df['company'], drop_first = True)
company_dummies = company_dummies.rename(columns={'audi':'CarCompany(audi)', 'bmw':'CarCompany(bmw)', 'buick':'CarCompany(buick)', 'chevrolet':'CarCompany(chevrolet)','dodge':'CarCompany(dodge)' ,'honda':'CarCompany(honda)', 'isuzu':'CarCompany(isuzu)','jaguar':'CarCompany(jaguar)', 'mazda':'CarCompany(mazda)', 'mercury':'CarCompany(mercury)','mitsubishi':'CarCompany(mitsubishi)','nissan':'CarCompany(nissan)', 'peugeot':'CarCompany(peugeot)','plymouth':'CarCompany(plymouth)','porsche':'CarCompany(porsche)', 'renault':'CarCompany(renault)','saab':'CarCompany(saab)','subaru':'CarCompany(subaru)', 'toyota':'CarCompany(toyota)','volkswagen':'CarCompany(volkswagen)','volvo':'CarCompany(volvo)'})
df = pd.concat([df,company_dummies], axis=1)
df.drop('company', axis=1, inplace=True)

# prompt: scale data (normlize it)

# Assuming 'df' is your DataFrame from the previous code

# Select numerical features for scaling
numerical_features = ['wheelbase', 'carlength', 'carwidth', 'carheight', 'curbweight',
                      'enginesize', 'boreratio', 'stroke', 'compressionratio', 'horsepower',
                      'peakrpm', 'citympg', 'highwaympg', 'price']

# Create a MinMaxScaler object
scaler = MinMaxScaler()

# Fit and transform the selected numerical features
df[numerical_features] = scaler.fit_transform(df[numerical_features])

# Now the numerical features in the 'df' DataFrame are scaled between 0 and 1

"""**Now we can apply liner regression**

# Scaling Data
"""

scaler = MinMaxScaler()
df[col_numeric] = scaler.fit_transform(df[col_numeric])

df.head()

df.describe()

"""# Splitting Data"""

X = df.drop('price', axis=1)
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)
print("Training Festures Shape: ", X_train.shape)
print("Training Target Shape: ", y_train.shape)
print("Testing Festures Shape: ", X_test.shape)
print("Testing Target Shape: ", y_test.shape)

"""# Train The Model"""

Model = LinearRegression()
Model.fit(X_train, y_train)

"""Make pedictions on test set"""

y_pred = Model.predict(X_test)

"""# Evaluate The Model"""

# Calculate MSE
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)